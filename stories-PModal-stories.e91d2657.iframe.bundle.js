"use strict";(self.webpackChunkpostilize_react=self.webpackChunkpostilize_react||[]).push([[9775],{"./node_modules/@mui/system/esm/styled.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});let __WEBPACK_DEFAULT_EXPORT__=(0,__webpack_require__("./node_modules/@mui/system/esm/createStyled.js").ZP)()},"./node_modules/@mui/system/node_modules/clsx/dist/clsx.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e){if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f)}else for(f in e)e[f]&&(n&&(n+=" "),n+=f)}return n}__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});let __WEBPACK_DEFAULT_EXPORT__=function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}},"./src/stories/PModal.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Floating:()=>Floating,FloatingWithAdvancedButtonsAndHeaderText:()=>FloatingWithAdvancedButtonsAndHeaderText,FloatingWithBackAndThreeActionButtons:()=>FloatingWithBackAndThreeActionButtons,FloatingWithBackButtonAndOneActionButton:()=>FloatingWithBackButtonAndOneActionButton,FloatingWithBackButtonAndOneActionButtonAndLoading:()=>FloatingWithBackButtonAndOneActionButtonAndLoading,FloatingWithEverything:()=>FloatingWithEverything,FloatingWithHeaderText:()=>FloatingWithHeaderText,FloatingWithHeaderTextAndBackAndThreeActionButtons:()=>FloatingWithHeaderTextAndBackAndThreeActionButtons,FloatingWithHeaderTextAndBackButtonAndOneActionButton:()=>FloatingWithHeaderTextAndBackButtonAndOneActionButton,FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading:()=>FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading,FloatingWithHeaderTextAndProgressBar:()=>FloatingWithHeaderTextAndProgressBar,FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton:()=>FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton,FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton:()=>FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton,FloatingWithHeaderTextAndStepper:()=>FloatingWithHeaderTextAndStepper,FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons:()=>FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons,FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton:()=>FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton,FloatingWithProgressBar:()=>FloatingWithProgressBar,FloatingWithProgressBarAndBackButtonAndOneActionButton:()=>FloatingWithProgressBarAndBackButtonAndOneActionButton,FloatingWithProgressBarAndStepper:()=>FloatingWithProgressBarAndStepper,FloatingWithStepper:()=>FloatingWithStepper,FloatingWithStepperAndBackAndThreeActionButtons:()=>FloatingWithStepperAndBackAndThreeActionButtons,FloatingWithStepperAndBackButtonAndOneActionButton:()=>FloatingWithStepperAndBackButtonAndOneActionButton,WithBackAndThreeActionButtons:()=>WithBackAndThreeActionButtons,WithBackButtonAndOneActionButton:()=>WithBackButtonAndOneActionButton,WithBackButtonAndOneActionButtonAndLoading:()=>WithBackButtonAndOneActionButtonAndLoading,WithEverything:()=>WithEverything,WithOneActionButton:()=>WithOneActionButton,WithProgressBar:()=>WithProgressBar,WithProgressBarAndBackButtonAndOneActionButton:()=>WithProgressBarAndBackButtonAndOneActionButton,WithStepper:()=>WithStepper,WithStepperAndBackAndThreeActionButtons:()=>WithStepperAndBackAndThreeActionButtons,WithStepperAndBackButtonAndOneActionButton:()=>WithStepperAndBackButtonAndOneActionButton,WithStepperAndOneButton:()=>WithStepperAndOneButton,WithStepperAndProgressBarAndBackAndThreeActionButtons:()=>WithStepperAndProgressBarAndBackAndThreeActionButtons,WithStepperAndProgressBarAndBackButtonAndOneActionButton:()=>WithStepperAndProgressBarAndBackButtonAndOneActionButton,WithStepperForcedOnNewLine:()=>WithStepperForcedOnNewLine,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_components_library_PModal__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/library/PModal.js"),_components_library_PTypography__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/library/PTypography.js"),_components_library_PButton__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/library/PButton.js"),_components_library_PBackButton__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/components/library/PBackButton.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");let __WEBPACK_DEFAULT_EXPORT__={title:"Postilize Library/PModal",component:_components_library_PModal__WEBPACK_IMPORTED_MODULE_1__.Z,parameters:{layout:"fullscreen"},argTypes:{pVariant:{control:"select",options:["primary"]},open:{control:"boolean"},progressList:{control:"object"},progressPercent:{control:"text"},extraWideContent:{control:"boolean"},ultraWideContent:{control:"boolean"},loadingNext:{control:"boolean"},floating:{control:"boolean"},headerText:{control:"text"},inlineHeaderText:{control:"boolean"}}},progressListData=[{index:1,name:"Bio"},{index:2,name:"Profile"},{index:3,name:"List"},{index:4,name:"Settings"},{index:5,name:"Bank"},{index:6,name:"Portfolio"}],Template=args=>{let[currentStep,setCurrentStep]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1),[progressPercent,setProgressPerc]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1/progressListData.length*100),backButton=(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_components_library_PBackButton__WEBPACK_IMPORTED_MODULE_4__.Z,{onClick:()=>{let newStep=currentStep>1?currentStep-1:1;setCurrentStep(newStep),setProgressPerc(newStep/progressListData.length*100)},iconType:"back"}),continueButton=(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_components_library_PButton__WEBPACK_IMPORTED_MODULE_3__.Z,{onClick:()=>{let newStep=currentStep<progressListData.length?currentStep+1:progressListData.length;setCurrentStep(newStep),setProgressPerc(newStep/progressListData.length*100)},pVariant:"primary",children:"Continue"}),closeEarlyButton=(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_components_library_PButton__WEBPACK_IMPORTED_MODULE_3__.Z,{onClick:args.onClose,pVariant:"outlined",children:"Close without saving"}),annoyingButton=(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_components_library_PButton__WEBPACK_IMPORTED_MODULE_3__.Z,{onClick:()=>alert("You clicked the annoying button"),pVariant:"black",children:"Annoying button"}),exitButton=(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_components_library_PBackButton__WEBPACK_IMPORTED_MODULE_4__.Z,{onClick:()=>console.log("Exit button clicked"),iconType:"exit"}),progressList=progressListData.map(item=>({...item,active:item.index===currentStep}));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",height:"75vh"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(_components_library_PModal__WEBPACK_IMPORTED_MODULE_1__.Z,{...args,progressList:args.withStepper&&progressList,progressPercent:args.withProgressBar&&progressPercent,backButton:args.withBackButton&&backButton,actionButtons:(_ref=>{let{withAnnoyingButton,withCloseEarlyButton,withContinueButton,withExitButton,withDummyButton}=_ref,buttons=[];return withAnnoyingButton&&buttons.push(annoyingButton),withCloseEarlyButton&&buttons.push(closeEarlyButton),withContinueButton&&buttons.push(continueButton),withExitButton&&buttons.push(exitButton),withDummyButton&&buttons.push(null),buttons})(args),children:[args.withStepper&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div",{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(_components_library_PTypography__WEBPACK_IMPORTED_MODULE_2__.Z,{size:"body1",weight:"regular",children:["Step ",currentStep," of ",progressListData.length]}),args.children]}),!args.withStepper&&args.children]})})},Default=Template.bind({});Default.args={children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_components_library_PTypography__WEBPACK_IMPORTED_MODULE_2__.Z,{size:"h3",weight:"bold",children:"Body element"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_components_library_PTypography__WEBPACK_IMPORTED_MODULE_2__.Z,{size:"body1",weight:"regular",children:"Subtitle"})]}),pVariant:"primary",open:!0,floating:!1};let WithOneActionButton=Template.bind({});WithOneActionButton.args={...Default.args,withContinueButton:!0};let WithBackButtonAndOneActionButton=Template.bind({});WithBackButtonAndOneActionButton.args={...Default.args,withBackButton:!0,withContinueButton:!0};let WithBackButtonAndOneActionButtonAndLoading=Template.bind({});WithBackButtonAndOneActionButtonAndLoading.args={...WithBackButtonAndOneActionButton.args,loadingNext:!0};let WithBackAndThreeActionButtons=Template.bind({});WithBackAndThreeActionButtons.args={...Default.args,withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0};let WithStepper=Template.bind({});WithStepper.args={...Default.args,withStepper:!0};let WithProgressBar=Template.bind({});WithProgressBar.args={...Default.args,withProgressBar:!0};let WithStepperAndOneButton=Template.bind({});WithStepperAndOneButton.args={...Default.args,withStepper:!0,withContinueButton:!0};let WithStepperAndBackButtonAndOneActionButton=Template.bind({});WithStepperAndBackButtonAndOneActionButton.args={...Default.args,withStepper:!0,withBackButton:!0,withContinueButton:!0};let WithStepperAndProgressBarAndBackButtonAndOneActionButton=Template.bind({});WithStepperAndProgressBarAndBackButtonAndOneActionButton.args={...Default.args,withStepper:!0,withProgressBar:!0,withBackButton:!0,withContinueButton:!0};let WithStepperForcedOnNewLine=Template.bind({});WithStepperForcedOnNewLine.args={...Default.args,withStepper:!0,withContinueButton:!0,withDummyButton:!0};let WithStepperAndProgressBarAndBackAndThreeActionButtons=Template.bind({});WithStepperAndProgressBarAndBackAndThreeActionButtons.args={...Default.args,withStepper:!0,withProgressBar:!0,withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0};let WithStepperAndBackAndThreeActionButtons=Template.bind({});WithStepperAndBackAndThreeActionButtons.args={...Default.args,withStepper:!0,withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0};let WithProgressBarAndBackButtonAndOneActionButton=Template.bind({});WithProgressBarAndBackButtonAndOneActionButton.args={...Default.args,withProgressBar:!0,withBackButton:!0,withContinueButton:!0};let WithEverything=Template.bind({});WithEverything.args={...Default.args,withStepper:!0,withProgressBar:!0,withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0,withExitButton:!0};let Floating=Template.bind({});Floating.args={...Default.args,floating:!0,floatingDimensions:{width:"90vw",height:"90vh"}};let FloatingWithHeaderText=Template.bind({});FloatingWithHeaderText.args={...Floating.args,headerText:"Header Text"};let FloatingWithAdvancedButtonsAndHeaderText=Template.bind({});FloatingWithAdvancedButtonsAndHeaderText.args={...Floating.args,headerText:"Header Text",withContinueButton:!0,withExitButton:!0};let FloatingWithHeaderTextAndBackButtonAndOneActionButton=Template.bind({});FloatingWithHeaderTextAndBackButtonAndOneActionButton.args={...Floating.args,headerText:"Header Text",withBackButton:!0,withContinueButton:!0};let FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading=Template.bind({});FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading.args={...Floating.args,headerText:"Header Text",withBackButton:!0,withContinueButton:!0,loadingNext:!0};let FloatingWithHeaderTextAndBackAndThreeActionButtons=Template.bind({});FloatingWithHeaderTextAndBackAndThreeActionButtons.args={...Floating.args,headerText:"Header Text",withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0,withExitButton:!0};let FloatingWithHeaderTextAndStepper=Template.bind({});FloatingWithHeaderTextAndStepper.args={...Floating.args,headerText:"Header Text",withStepper:!0};let FloatingWithHeaderTextAndProgressBar=Template.bind({});FloatingWithHeaderTextAndProgressBar.args={...Floating.args,headerText:"Header Text",withProgressBar:!0};let FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton=Template.bind({});FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton.args={...Floating.args,headerText:"Header Text",withStepper:!0,withBackButton:!0,withContinueButton:!0};let FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons=Template.bind({});FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons.args={...Floating.args,headerText:"Header Text",withStepper:!0,withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0,withExitButton:!0};let FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton=Template.bind({});FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton.args={...Floating.args,headerText:"Header Text",withProgressBar:!0,withBackButton:!0,withContinueButton:!0};let FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton=Template.bind({});FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton.args={...Floating.args,headerText:"Header Text",withProgressBar:!0,withStepper:!0,withBackButton:!0,withContinueButton:!0};let FloatingWithBackButtonAndOneActionButton=Template.bind({});FloatingWithBackButtonAndOneActionButton.args={...Floating.args,withBackButton:!0,withContinueButton:!0};let FloatingWithBackButtonAndOneActionButtonAndLoading=Template.bind({});FloatingWithBackButtonAndOneActionButtonAndLoading.args={...Floating.args,withBackButton:!0,withContinueButton:!0,loadingNext:!0};let FloatingWithBackAndThreeActionButtons=Template.bind({});FloatingWithBackAndThreeActionButtons.args={...Floating.args,withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0};let FloatingWithStepper=Template.bind({});FloatingWithStepper.args={...Floating.args,withStepper:!0};let FloatingWithProgressBar=Template.bind({});FloatingWithProgressBar.args={...Floating.args,withProgressBar:!0};let FloatingWithProgressBarAndStepper=Template.bind({});FloatingWithProgressBarAndStepper.args={...Floating.args,withProgressBar:!0,withStepper:!0};let FloatingWithStepperAndBackButtonAndOneActionButton=Template.bind({});FloatingWithStepperAndBackButtonAndOneActionButton.args={...Floating.args,withStepper:!0,withBackButton:!0,withContinueButton:!0};let FloatingWithStepperAndBackAndThreeActionButtons=Template.bind({});FloatingWithStepperAndBackAndThreeActionButtons.args={...Floating.args,withStepper:!0,withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0,withExitButton:!0};let FloatingWithProgressBarAndBackButtonAndOneActionButton=Template.bind({});FloatingWithProgressBarAndBackButtonAndOneActionButton.args={...Floating.args,withProgressBar:!0,withBackButton:!0,withContinueButton:!0};let FloatingWithEverything=Template.bind({});FloatingWithEverything.args={...Floating.args,headerText:"Header Text",withStepper:!0,withProgressBar:!0,withBackButton:!0,withCloseEarlyButton:!0,withContinueButton:!0,withAnnoyingButton:!0,withExitButton:!0},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...Default.parameters?.docs?.source}}},WithOneActionButton.parameters={...WithOneActionButton.parameters,docs:{...WithOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithOneActionButton.parameters?.docs?.source}}},WithBackButtonAndOneActionButton.parameters={...WithBackButtonAndOneActionButton.parameters,docs:{...WithBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithBackButtonAndOneActionButton.parameters?.docs?.source}}},WithBackButtonAndOneActionButtonAndLoading.parameters={...WithBackButtonAndOneActionButtonAndLoading.parameters,docs:{...WithBackButtonAndOneActionButtonAndLoading.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithBackButtonAndOneActionButtonAndLoading.parameters?.docs?.source}}},WithBackAndThreeActionButtons.parameters={...WithBackAndThreeActionButtons.parameters,docs:{...WithBackAndThreeActionButtons.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithBackAndThreeActionButtons.parameters?.docs?.source}}},WithStepper.parameters={...WithStepper.parameters,docs:{...WithStepper.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithStepper.parameters?.docs?.source}}},WithProgressBar.parameters={...WithProgressBar.parameters,docs:{...WithProgressBar.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithProgressBar.parameters?.docs?.source}}},WithStepperAndOneButton.parameters={...WithStepperAndOneButton.parameters,docs:{...WithStepperAndOneButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithStepperAndOneButton.parameters?.docs?.source}}},WithStepperAndBackButtonAndOneActionButton.parameters={...WithStepperAndBackButtonAndOneActionButton.parameters,docs:{...WithStepperAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithStepperAndBackButtonAndOneActionButton.parameters?.docs?.source}}},WithStepperAndProgressBarAndBackButtonAndOneActionButton.parameters={...WithStepperAndProgressBarAndBackButtonAndOneActionButton.parameters,docs:{...WithStepperAndProgressBarAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithStepperAndProgressBarAndBackButtonAndOneActionButton.parameters?.docs?.source}}},WithStepperForcedOnNewLine.parameters={...WithStepperForcedOnNewLine.parameters,docs:{...WithStepperForcedOnNewLine.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithStepperForcedOnNewLine.parameters?.docs?.source}}},WithStepperAndProgressBarAndBackAndThreeActionButtons.parameters={...WithStepperAndProgressBarAndBackAndThreeActionButtons.parameters,docs:{...WithStepperAndProgressBarAndBackAndThreeActionButtons.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithStepperAndProgressBarAndBackAndThreeActionButtons.parameters?.docs?.source}}},WithStepperAndBackAndThreeActionButtons.parameters={...WithStepperAndBackAndThreeActionButtons.parameters,docs:{...WithStepperAndBackAndThreeActionButtons.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithStepperAndBackAndThreeActionButtons.parameters?.docs?.source}}},WithProgressBarAndBackButtonAndOneActionButton.parameters={...WithProgressBarAndBackButtonAndOneActionButton.parameters,docs:{...WithProgressBarAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithProgressBarAndBackButtonAndOneActionButton.parameters?.docs?.source}}},WithEverything.parameters={...WithEverything.parameters,docs:{...WithEverything.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...WithEverything.parameters?.docs?.source}}},Floating.parameters={...Floating.parameters,docs:{...Floating.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...Floating.parameters?.docs?.source}}},FloatingWithHeaderText.parameters={...FloatingWithHeaderText.parameters,docs:{...FloatingWithHeaderText.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderText.parameters?.docs?.source}}},FloatingWithAdvancedButtonsAndHeaderText.parameters={...FloatingWithAdvancedButtonsAndHeaderText.parameters,docs:{...FloatingWithAdvancedButtonsAndHeaderText.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithAdvancedButtonsAndHeaderText.parameters?.docs?.source}}},FloatingWithHeaderTextAndBackButtonAndOneActionButton.parameters={...FloatingWithHeaderTextAndBackButtonAndOneActionButton.parameters,docs:{...FloatingWithHeaderTextAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndBackButtonAndOneActionButton.parameters?.docs?.source}}},FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading.parameters={...FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading.parameters,docs:{...FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading.parameters?.docs?.source}}},FloatingWithHeaderTextAndBackAndThreeActionButtons.parameters={...FloatingWithHeaderTextAndBackAndThreeActionButtons.parameters,docs:{...FloatingWithHeaderTextAndBackAndThreeActionButtons.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndBackAndThreeActionButtons.parameters?.docs?.source}}},FloatingWithHeaderTextAndStepper.parameters={...FloatingWithHeaderTextAndStepper.parameters,docs:{...FloatingWithHeaderTextAndStepper.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndStepper.parameters?.docs?.source}}},FloatingWithHeaderTextAndProgressBar.parameters={...FloatingWithHeaderTextAndProgressBar.parameters,docs:{...FloatingWithHeaderTextAndProgressBar.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndProgressBar.parameters?.docs?.source}}},FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton.parameters={...FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton.parameters,docs:{...FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton.parameters?.docs?.source}}},FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons.parameters={...FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons.parameters,docs:{...FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons.parameters?.docs?.source}}},FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton.parameters={...FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton.parameters,docs:{...FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton.parameters?.docs?.source}}},FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton.parameters={...FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton.parameters,docs:{...FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton.parameters?.docs?.source}}},FloatingWithBackButtonAndOneActionButton.parameters={...FloatingWithBackButtonAndOneActionButton.parameters,docs:{...FloatingWithBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithBackButtonAndOneActionButton.parameters?.docs?.source}}},FloatingWithBackButtonAndOneActionButtonAndLoading.parameters={...FloatingWithBackButtonAndOneActionButtonAndLoading.parameters,docs:{...FloatingWithBackButtonAndOneActionButtonAndLoading.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithBackButtonAndOneActionButtonAndLoading.parameters?.docs?.source}}},FloatingWithBackAndThreeActionButtons.parameters={...FloatingWithBackAndThreeActionButtons.parameters,docs:{...FloatingWithBackAndThreeActionButtons.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithBackAndThreeActionButtons.parameters?.docs?.source}}},FloatingWithStepper.parameters={...FloatingWithStepper.parameters,docs:{...FloatingWithStepper.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithStepper.parameters?.docs?.source}}},FloatingWithProgressBar.parameters={...FloatingWithProgressBar.parameters,docs:{...FloatingWithProgressBar.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithProgressBar.parameters?.docs?.source}}},FloatingWithProgressBarAndStepper.parameters={...FloatingWithProgressBarAndStepper.parameters,docs:{...FloatingWithProgressBarAndStepper.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithProgressBarAndStepper.parameters?.docs?.source}}},FloatingWithStepperAndBackButtonAndOneActionButton.parameters={...FloatingWithStepperAndBackButtonAndOneActionButton.parameters,docs:{...FloatingWithStepperAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithStepperAndBackButtonAndOneActionButton.parameters?.docs?.source}}},FloatingWithStepperAndBackAndThreeActionButtons.parameters={...FloatingWithStepperAndBackAndThreeActionButtons.parameters,docs:{...FloatingWithStepperAndBackAndThreeActionButtons.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithStepperAndBackAndThreeActionButtons.parameters?.docs?.source}}},FloatingWithProgressBarAndBackButtonAndOneActionButton.parameters={...FloatingWithProgressBarAndBackButtonAndOneActionButton.parameters,docs:{...FloatingWithProgressBarAndBackButtonAndOneActionButton.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithProgressBarAndBackButtonAndOneActionButton.parameters?.docs?.source}}},FloatingWithEverything.parameters={...FloatingWithEverything.parameters,docs:{...FloatingWithEverything.parameters?.docs,source:{originalSource:'args => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [progressPercent, setProgressPerc] = useState(1 / progressListData.length * 100);\n  const handleBack = () => {\n    const newStep = currentStep > 1 ? currentStep - 1 : 1;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const handleContinue = () => {\n    const newStep = currentStep < progressListData.length ? currentStep + 1 : progressListData.length;\n    setCurrentStep(newStep);\n    setProgressPerc(newStep / progressListData.length * 100);\n  };\n  const backButton = <PBackButton onClick={handleBack} iconType="back" />;\n  const continueButton = <PButton onClick={handleContinue} pVariant="primary">\n      Continue\n    </PButton>;\n  const closeEarlyButton = <PButton onClick={args.onClose} pVariant="outlined">\n      Close without saving\n    </PButton>;\n  const annoyingButton = <PButton onClick={() => alert("You clicked the annoying button")} pVariant="black">\n      Annoying button\n    </PButton>;\n  const exitButton = <PBackButton onClick={() => console.log("Exit button clicked")} iconType="exit" />;\n  const getActionButtons = ({\n    withAnnoyingButton,\n    withCloseEarlyButton,\n    withContinueButton,\n    withExitButton,\n    withDummyButton\n  }) => {\n    const buttons = [];\n\n    // The order of the array is the horizontal order of the buttons (left to right)\n    if (withAnnoyingButton) buttons.push(annoyingButton);\n    if (withCloseEarlyButton) buttons.push(closeEarlyButton);\n    if (withContinueButton) buttons.push(continueButton);\n    if (withExitButton) buttons.push(exitButton);\n    if (withDummyButton) buttons.push(null);\n    return buttons;\n  };\n  const progressList = progressListData.map(item => ({\n    ...item,\n    active: item.index === currentStep\n  }));\n  return <div style={{\n    display: "flex",\n    justifyContent: "center",\n    alignItems: "center",\n    height: "75vh"\n  }}>\n      <PModal {...args} progressList={args.withStepper && progressList} progressPercent={args.withProgressBar && progressPercent} backButton={args.withBackButton && backButton} actionButtons={getActionButtons(args)}>\n        {args.withStepper && <div>\n            <PTypography size="body1" weight="regular">\n              Step {currentStep} of {progressListData.length}\n            </PTypography>\n            {args.children}\n          </div>}\n        {!args.withStepper && args.children}\n      </PModal>\n    </div>;\n}',...FloatingWithEverything.parameters?.docs?.source}}};let __namedExportsOrder=["Default","WithOneActionButton","WithBackButtonAndOneActionButton","WithBackButtonAndOneActionButtonAndLoading","WithBackAndThreeActionButtons","WithStepper","WithProgressBar","WithStepperAndOneButton","WithStepperAndBackButtonAndOneActionButton","WithStepperAndProgressBarAndBackButtonAndOneActionButton","WithStepperForcedOnNewLine","WithStepperAndProgressBarAndBackAndThreeActionButtons","WithStepperAndBackAndThreeActionButtons","WithProgressBarAndBackButtonAndOneActionButton","WithEverything","Floating","FloatingWithHeaderText","FloatingWithAdvancedButtonsAndHeaderText","FloatingWithHeaderTextAndBackButtonAndOneActionButton","FloatingWithHeaderTextAndBackButtonAndOneActionButtonAndLoading","FloatingWithHeaderTextAndBackAndThreeActionButtons","FloatingWithHeaderTextAndStepper","FloatingWithHeaderTextAndProgressBar","FloatingWithHeaderTextAndStepperAndBackButtonAndOneActionButton","FloatingWithHeaderTextAndStepperAndBackAndThreeActionButtons","FloatingWithHeaderTextAndProgressBarAndBackButtonAndOneActionButton","FloatingWithHeaderTextAndProgressBarAndStepperAndBackButtonAndOneActionButton","FloatingWithBackButtonAndOneActionButton","FloatingWithBackButtonAndOneActionButtonAndLoading","FloatingWithBackAndThreeActionButtons","FloatingWithStepper","FloatingWithProgressBar","FloatingWithProgressBarAndStepper","FloatingWithStepperAndBackButtonAndOneActionButton","FloatingWithStepperAndBackAndThreeActionButtons","FloatingWithProgressBarAndBackButtonAndOneActionButton","FloatingWithEverything"]},"./src/components/library/PBackButton.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>PBackButton}),__webpack_require__("./node_modules/react/index.js");var _assets_Icons_Delete_svg__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/assets/Icons/Delete.svg"),_mui_material_Box__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mui/material/Box/Box.js"),_assets_Icons_Arrow_Left_svg__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/assets/Icons/Arrow-Left.svg"),_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mui/material/styles/useTheme.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");function PBackButton(_ref){let{iconType,onClick}=_ref,theme=(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.Z)(),buttonStyle={cursor:"pointer",display:"flex",justifyContent:"center",alignItems:"center",width:"60px",height:"52px",borderRadius:"14px",backgroundColor:theme.palette.primary.main,padding:"16px, 20px, 16px, 20px","&:hover":{backgroundColor:theme.palette.primaryCL.Blue40}};return"back"===iconType?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_5__.Z,{onClick:onClick,sx:buttonStyle,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_assets_Icons_Arrow_Left_svg__WEBPACK_IMPORTED_MODULE_2__.r,{fill:theme.palette.primaryCL.Blue100})}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_5__.Z,{onClick:onClick,sx:buttonStyle,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_assets_Icons_Delete_svg__WEBPACK_IMPORTED_MODULE_1__.r,{fill:theme.palette.primaryCL.Blue100})})}PBackButton.__docgenInfo={description:"",methods:[],displayName:"PBackButton"}}}]);